syntax = "proto3";

package lnrpc;

import "rpc.proto";

option go_package = "github.com/pkt-cash/pktd/lnd/lnrpc";

/*
 * Comments in this file will be directly parsed into the API
 * Documentation as descriptions of the associated method, message, or field.
 * These descriptions should go right above the definition of the object, and
 * can be in either block or // comment format.
 *
 * An RPC method can be matched to an lncli command by placing a line in the
 * beginning of the description in exactly the following format:
 * lncli: `methodname`
 *
 * Failure to specify the exact name of the command will cause documentation
 * generation to fail.
 *
 * More information on how exactly the gRPC documentation is generated from
 * this proto file can be found here:
 * https://github.com/lightninglabs/lightning-api
 */

// WalletUnlocker is a service that is used to set up a wallet password for
// lnd at first startup, and unlock a previously set up wallet.
service WalletUnlocker {
    /*
    $pld.category: `Seed`
    $pld.short_description: `Create a secret seed`

    GenSeed is the first method that should be used to instantiate a new lnd
    instance. This method allows a caller to generate a new aezeed cipher seed
    given an optional passphrase. If provided, the passphrase will be necessary
    to decrypt the cipherseed to expose the internal wallet seed.

    Once the cipherseed is obtained and verified by the user, the InitWallet
    method should be used to commit the newly generated seed, and create the
    wallet.
    */
    rpc GenSeed (GenSeedRequest) returns (GenSeedResponse);

    /*
    $pld.category: `Wallet`
    $pld.short_description: `Initialize a wallet when starting lnd for the first time`

    InitWallet is used when lnd is starting up for the first time to fully
    initialize the daemon and its internal wallet. At the very least a wallet
    password must be provided. This will be used to encrypt sensitive material
    on disk.

    In the case of a recovery scenario, the user can also specify their aezeed
    mnemonic and passphrase. If set, then the daemon will use this prior state
    to initialize its internal wallet.

    Alternatively, this can be used along with the GenSeed RPC to obtain a
    seed, then present it to the user. Once it has been verified by the user,
    the seed can be fed into this RPC in order to commit the new wallet.
    */
    rpc InitWallet (InitWalletRequest) returns (InitWalletResponse);

    /*
    $pld.category: `Wallet`
    $pld.short_description: `Unlock an encrypted wallet at startup`

    UnlockWallet is used at startup of lnd to provide a password to unlock
    the wallet database.
    */
    rpc UnlockWallet (UnlockWalletRequest) returns (UnlockWalletResponse);
}

message GenSeedRequest {
    /*
    seed_passphrase is the optional user specified passphrase that will be used
    to encrypt the generated seed.
    */
    string seed_passphrase = 1;

    /*
    seed_passphrase_bin overrides seed_passphrase if specified, for binary
    representation of the passphrase. If using JSON then this field must be base64
    encoded.
    */
    bytes seed_passphrase_bin = 2;

    /*
    seed_entropy is an optional 16-bytes generated via CSPRNG. If not
    specified, then a fresh set of randomness will be used to create the seed.
    When using REST, this field must be encoded as base64.
    */
    bytes seed_entropy = 3;
}
message GenSeedResponse {
    /*
    seed is a 15-word mnemonic that encodes a secret root seed used to generate
    all private keys of the wallet.
    */
    repeated string seed = 1;
}

message InitWalletRequest {
    /*
    wallet_passphrase is the passphrase that should be used to encrypt the
    wallet. This MUST be at least 8 chars in length. After creation, this
    password is required to unlock the daemon.
    */
    string wallet_passphrase = 1;
    /*
    If specified, will override wallet_passphrase, but is expressed in binary.
    When using REST, this field must be encoded as base64.
    */
    bytes wallet_passphrase_bin = 2;

    /*
    wallet_seed is a 15-word wallet seed. This may have been generated by the
    GenSeed method, or be an existing seed.
    */
    repeated string wallet_seed = 3;

    /*
    seed_passphrase is an optional user provided passphrase that will be used
    to encrypt the generated seed.
    */
    string seed_passphrase = 4;

    /*
    If specified, will override seed_passphrase, but is expressed in binary.
    When using REST, this field must be encoded as base64.
    */
    bytes seed_passphrase_bin = 5;

    /*
    recovery_window is an optional argument specifying the address lookahead
    when restoring a wallet seed. The recovery window applies to each
    individual branch of the BIP44 derivation paths. Supplying a recovery
    window of zero indicates that no addresses should be recovered, such after
    the first initialization of the wallet.
    */
    int32 recovery_window = 6;

    /*
    channel_backups is an optional argument that allows clients to recover the
    settled funds within a set of channels. This should be populated if the
    user was unable to close out all channels and sweep funds before partial or
    total data loss occurred. If specified, then after on-chain recovery of
    funds, lnd begin to carry out the data loss recovery protocol in order to
    recover the funds in each channel from a remote force closed transaction.
    */
    ChanBackupSnapshot channel_backups = 7;

    /*
    wallet_name is an optional argument that allows to define the 
    wallet filename other than the default wallet.db
    */
    string wallet_name = 8;
}
message InitWalletResponse {
}

message UnlockWalletRequest {
    /*
    wallet_passphrase should be the current valid private passphrase for the daemon. This
    will be required to decrypt on-disk material that the daemon requires to
    function properly.
    */
    string wallet_passphrase = 1;
    /*
    If specified, will override wallet_passphrase, but is expressed in binary.
    When using REST, this field must be encoded as base64.
    */
    bytes wallet_passphrase_bin = 2;

    /*
    recovery_window is an optional argument specifying the address lookahead
    when restoring a wallet seed. The recovery window applies to each
    individual branch of the BIP44 derivation paths. Supplying a recovery
    window of zero indicates that no addresses should be recovered, such after
    the first initialization of the wallet.
    */
    int32 recovery_window = 3;

    /*
    channel_backups is an optional argument that allows clients to recover the
    settled funds within a set of channels. This should be populated if the
    user was unable to close out all channels and sweep funds before partial or
    total data loss occurred. If specified, then after on-chain recovery of
    funds, lnd begin to carry out the data loss recovery protocol in order to
    recover the funds in each channel from a remote force closed transaction.
    */
    ChanBackupSnapshot channel_backups = 4;

    /* 
    wallet_name is optional when the user wants to load a specified wallet other 
    than the default wallet.db
    */
    string wallet_name = 5;
}
message UnlockWalletResponse {
}
